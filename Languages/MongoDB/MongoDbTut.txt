test 1 >susy={"name":"susy smith"}
{ "name" : "susy smith" }
test 2 >edit susy
test 3 >use
bad use parameter
test 4 >use testdb
switched to db testdb
testdb 5 >db.testdb.insert({"name":"Barry Bones"})
WriteResult({ "nInserted" : 1 })
testdb 6 >db.testdb.insert([{"name":"babe rith"},
... {"name":
... "Hank Aaron"},])
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 2,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})
testdb 7 >db.testdb.find().pretty()
{ "_id" : ObjectId("5b900a52a4b22328fdc26758"), "name" : "Barry Bones" }
{ "_id" : ObjectId("5b900acba4b22328fdc26759"), "name" : "babe rith" }
{ "_id" : ObjectId("5b900acba4b22328fdc2675a"), "name" : "Hank Aaron" }
testdb 8 >db.testdb.remove({"name":"Babe Ruth"})
WriteResult({ "nRemoved" : 0 })
testdb 9 >db.testdb.find().pretty()
{ "_id" : ObjectId("5b900a52a4b22328fdc26758"), "name" : "Barry Bones" }
{ "_id" : ObjectId("5b900acba4b22328fdc26759"), "name" : "babe rith" }
{ "_id" : ObjectId("5b900acba4b22328fdc2675a"), "name" : "Hank Aaron" }
testdb 10 >db.testdb.update({"name":"Hank Aaron"},
... {$set: {"name":"Hank Louis Aaron","Home Runs":755}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
testdb 11 >db.testdb.find().pretty()
{ "_id" : ObjectId("5b900a52a4b22328fdc26758"), "name" : "Barry Bones" }
{ "_id" : ObjectId("5b900acba4b22328fdc26759"), "name" : "babe rith" }
{
        "_id" : ObjectId("5b900acba4b22328fdc2675a"),
        "name" : "Hank Louis Aaron",
        "Home Runs" : 755
}
testdb 12 >db.testdb.insert([{"name":"Babe Ruth","Hall of Fame": "Inductee"},
... {"name":"Ty Cobb","Hall of fame":"Inductee"},
... {"name":"Walter Johnson","Hall of Fame":"Inductee"},
... {"name":"Christy Mathewson","Hall of Fame":"Inductee"},
... {"name":"Honus Wagner","Hall of fame":"Inductee"}])
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 5,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})
testdb 13 >db.testdb.find().pretty()
{ "_id" : ObjectId("5b900a52a4b22328fdc26758"), "name" : "Barry Bones" }
{ "_id" : ObjectId("5b900acba4b22328fdc26759"), "name" : "babe rith" }
{
        "_id" : ObjectId("5b900acba4b22328fdc2675a"),
        "name" : "Hank Louis Aaron",
        "Home Runs" : 755
}
{
        "_id" : ObjectId("5b900c2ea4b22328fdc2675b"),
        "name" : "Babe Ruth",
        "Hall of Fame" : "Inductee"
}
{
        "_id" : ObjectId("5b900c2ea4b22328fdc2675c"),
        "name" : "Ty Cobb",
        "Hall of fame" : "Inductee"
}
{
        "_id" : ObjectId("5b900c2ea4b22328fdc2675d"),
        "name" : "Walter Johnson",
        "Hall of Fame" : "Inductee"
}
{
        "_id" : ObjectId("5b900c2ea4b22328fdc2675e"),
        "name" : "Christy Mathewson",
        "Hall of Fame" : "Inductee"
}
{
        "_id" : ObjectId("5b900c2ea4b22328fdc2675f"),
        "name" : "Honus Wagner",
        "Hall of fame" : "Inductee"
}
testdb 14 >db.testdb.update({"Hall of Fame":"Inductee"},
... {$set: {"Hall of Fame":"Inducted in 1936"}},{multi:true})
WriteResult({ "nMatched" : 3, "nUpserted" : 0, "nModified" : 3 })
testdb 16 >db.testdb.find({"name":"Hank Louis Aaron"})
{ "_id" : ObjectId("5b900acba4b22328fdc2675a"), "name" : "Hank Louis Aaron", "Home Runs" db.testdb.update({"name":"Hank Louis Aaron"},{"$inc":{"Home Runs":1}})tdb 17 >db.testdb.update({"name":"Hank Louis Aaron"},{"$inc":{"Home Runs":1
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
testdb 19 >db.testdb.update({"name":"Hank Louis Aaron"},{"$inc":{"Home Runs":-1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
testdb 20 >db.testdb.update({"name":"Hank Louis Aaron"},{"$mul":{"Home Runs":2.081}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
testdb 21 >db.testdb.find()
{ "_id" : ObjectId("5b900a52a4b22328fdc26758"), "name" : "Barry Bones" }
{ "_id" : ObjectId("5b900acba4b22328fdc26759"), "name" : "babe rith" }
{ "_id" : ObjectId("5b900acba4b22328fdc2675a"), "name" : "Hank Louis Aaron", "Home Runs" : 1571.155 }
{ "_id" : ObjectId("5b900c2ea4b22328fdc2675b"), "name" : "Babe Ruth", "Hall of Fame" : "Inducted in 1936" }
{ "_id" : ObjectId("5b900c2ea4b22328fdc2675c"), "name" : "Ty Cobb", "Hall of fame" : "Inductee" }
{ "_id" : ObjectId("5b900c2ea4b22328fdc2675d"), "name" : "Walter Johnson", "Hall of Fame" : "Inducted in 1936" }
{ "_id" : ObjectId("5b900c2ea4b22328fdc2675e"), "name" : "Christy Mathewson", "Hall of Fame" : "Inducted in 1936" }
{ "_id" : ObjectId("5b900c2ea4b22328fdc2675f"), "name" : "Honus Wagner", "Hall of fame" : "Inductee" }
testdb 22 >db.testdb.update({"name":"Barry Bones"},{"$push":{"Reccords":
... {"Single Seasons HRs:"73,
... "HR's Career":762,"Walks":232}}})
2018-09-05T22:43:22.073+0530 E QUERY    [js] SyntaxError: missing : after property id @(shell):2:22
testdb 23 >db.testdb.update({"name":"Barry Bones"},{"$push":{"Reccords": {"Single Seasons HRs:"73, "HR's Career":762,"Walks":232}})
... })
2018-09-05T22:43:37.794+0530 E QUERY    [js] SyntaxError: missing : after property id @(shell):1:84
testdb 24 >db.testdb.update({"name":"Barry Bones"},{"$push":{"Reccords": {"Single Seasons HRs:"73, "HR's Career":762,"Walks":232}}})
2018-09-05T22:44:02.998+0530 E QUERY    [js] SyntaxError: missing : after property id @(sdb.testdb.update({"name":"Barry Bones"},{"$push":{"Records":{"Single Season HRs":73,"HRsCareer":762,"Walks":232}}})"},{"$push":{"Records":{"Sin})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
testdb 26 >db.testdb.update()
2018-09-05T22:45:58.863+0530 E QUERY    [js] Error: need a query :
DBCollection.prototype._parseUpdate@src/mongo/shell/collection.js:444:1
DBCollection.prototype.update@src/mongo/shell/collection.js:488:18
@(shell):1:1
testdb 27 >db.testdb.find().pretty()
{
        "_id" : ObjectId("5b900a52a4b22328fdc26758"),
        "name" : "Barry Bones",
        "Records" : [
                {
                        "Single Season HRs" : 73,
                        "HRsCareer" : 762,
                        "Walks" : 232
                }
        ]
}
{ "_id" : ObjectId("5b900acba4b22328fdc26759"), "name" : "babe rith" }
{
        "_id" : ObjectId("5b900acba4b22328fdc2675a"),
        "name" : "Hank Louis Aaron",
        "Home Runs" : 1571.155
}
{
        "_id" : ObjectId("5b900c2ea4b22328fdc2675b"),
        "name" : "Babe Ruth",
        "Hall of Fame" : "Inducted in 1936"
}
{
        "_id" : ObjectId("5b900c2ea4b22328fdc2675c"),
        "name" : "Ty Cobb",
        "Hall of fame" : "Inductee"
}
{
        "_id" : ObjectId("5b900c2ea4b22328fdc2675d"),
        "name" : "Walter Johnson",
        "Hall of Fame" : "Inducted in 1936"
}
{
        "_id" : ObjectId("5b900c2ea4b22328fdc2675e"),
        "name" : "Christy Mathewson",
        "Hall of Fame" : "Inducted in 1936"
}
{
        "_id" : ObjectId("5b900c2ea4b22328fdc2675f"),
        "name" : "Honus Wagner",
        "Hall of fame" : "Inductee"
}
testdb 28 >db.testdb.update({"name":"Barry Bones"},
... {"$push":{"Best Home Run Years":{"$each":
... [45,45,46,49,73],"$slice":5}})
... ^C

testdb 29 >db.testdb.update({"name":"Barry Bones"},
... {"$push":{"Best Home Run Years":{"$each":
... [45,45,46,46,49,73],
... "$slice":-5}}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
testdb 30 >db.testdb.find({"name":"Barry Bones"})
{ "_id" : ObjectId("5b900a52a4b22328fdc26758"), "name" : "Barry Bones", "Records" : [ { "Single Season HRs" : 73, "HRsCareer" : 762, "Walks" : 232 } ], "Best Home Run Years" : [ 45, 46, 46, 49, 73 ] }
testdb 31 >db.testdb.update({"name":"Barry Bones"},
... {"$addToSet":{ "Best Home Run Years": 47}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
testdb 32 >db.testdb.find({"name":"Barry Bones"})
{ "_id" : ObjectId("5b900a52a4b22328fdc26758"), "name" : "Barry Bones", "Records" : [ { "Single Season HRs" : 73, "HRsCareer" : 762, "Walks" : 232 } ], "Best Home Run Years" : [ 45, 46, 46, 49, 73, 47 ] }
testdb 33 >db.testdb.update({"name":"Barry Bones"}, {"$pop":{ "Best Home Run Years":1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
testdb 34 >db.testdb.find({"name":"Barry Bones"})
{ "_id" : ObjectId("5b900a52a4b22328fdc26758"), "name" : "Barry Bones", "Records" : [ { "Single Season HRs" : 73, "HRsCareer" : 762, "Walks" : 232 } ], "Best Home Run Years" : [ 45, 46, 46, 49, 73 ] }
testdb 35 >db.testdb.update({"name":"Barry Bones"}, {"$pop":{ "Best Home Run Years":-1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
testdb 36 >db.testdb.find({"name":"Barry Bones"})
{ "_id" : ObjectId("5b900a52a4b22328fdc26758"), "name" : "Barry Bones", "Records" : [ { "Single Season HRs" : 73, "HRsCareer" : 762, "Walks" : 232 } ], "Best Home Run Years" : [ 46, 46, 49, 73 ] }
testdb 37 >db.testdb.update({"name":"Barry Bones"}, {"$pull":{ "Best Home Run Years":73}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
testdb 38 >db.testdb.find({"name":"Barry Bones"})
{ "_id" : ObjectId("5b900a52a4b22328fdc26758"), "name" : "Barry Bones", "Records" : [ { "Single Season HRs" : 73, "HRsCareer" : 762, "Walks" : 232 } ], "Best Home Run Years" : [ 46, 46, 49 ] }
testdb 39 >db.testdb.drop()
true
testdb 40 >db.testdb.find({"name":"Barry Bones"})
testdb 21 >db.testdb.drop()
true
testdb 22 >for(i=0; i<500000;i++){
... db.testdb.insert(
... {"account":"account"+i,
... "age":Math.floor(Math.random()*90)});
... }
WriteResult({ "nInserted" : 1 })
testdb 23 >db.testdb.find({"age":50}).explain("executionStats")
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "testdb.testdb",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "age" : {
                                "$eq" : 50
                        }
                },
                "winningPlan" : {
                        "stage" : "COLLSCAN",
                        "filter" : {
                                "age" : {
                                        "$eq" : 50
                                }
                        },
                        "direction" : "forward"
                },
                "rejectedPlans" : [ ]
        },
        "executionStats" : {
                "executionSuccess" : true,
                "nReturned" : 5552,
                "executionTimeMillis" : 297,
                "totalKeysExamined" : 0,
                "totalDocsExamined" : 500000,
                "executionStages" : {
                        "stage" : "COLLSCAN",
                        "filter" : {
                                "age" : {
                                        "$eq" : 50
                                }
                        },
                        "nReturned" : 5552,
                        "executionTimeMillisEstimate" : 258,
                        "works" : 500002,
                        "advanced" : 5552,
                        "needTime" : 494449,
                        "needYield" : 0,
                        "saveState" : 3913,
                        "restoreState" : 3913,
                        "isEOF" : 1,
                        "invalidates" : 0,
                        "direction" : "forward",
                        "docsExamined" : 500000
                }
        },
        "serverInfo" : {
                "host" : "LAPTOP-NKB522HC",
                "port" : 27017,
                "version" : "4.0.1",
                "gitVersion" : "54f1582fc6eb01de4d4c42f26fc133e623f065fb"
        },
        "ok" : 1
}
testdb 24 >db.testdb.ensureIndex({"age":1, "account":1})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
testdb 25 >db.testdb.find({"age":50}).explain("executionStats")
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "testdb.testdb",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "age" : {
                                "$eq" : 50
                        }
                },
                "winningPlan" : {
                        "stage" : "FETCH",
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "age" : 1,
                                        "account" : 1
                                },
                                "indexName" : "age_1_account_1",
                                "isMultiKey" : false,
                                "multiKeyPaths" : {
                                        "age" : [ ],
                                        "account" : [ ]
                                },
                                "isUnique" : false,
                                "isSparse" : false,
                                "isPartial" : false,
                                "indexVersion" : 2,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "age" : [
                                                "[50.0, 50.0]"
                                        ],
                                        "account" : [
                                                "[MinKey, MaxKey]"
                                        ]
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "executionStats" : {
                "executionSuccess" : true,
                "nReturned" : 5552,
                "executionTimeMillis" : 33,
                "totalKeysExamined" : 5552,
                "totalDocsExamined" : 5552,
                "executionStages" : {
                        "stage" : "FETCH",
                        "nReturned" : 5552,
                        "executionTimeMillisEstimate" : 32,
                        "works" : 5553,
                        "advanced" : 5552,
                        "needTime" : 0,
                        "needYield" : 0,
                        "saveState" : 44,
                        "restoreState" : 44,
                        "isEOF" : 1,
                        "invalidates" : 0,
                        "docsExamined" : 5552,
                        "alreadyHasObj" : 0,
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "nReturned" : 5552,
                                "executionTimeMillisEstimate" : 11,
                                "works" : 5553,
                                "advanced" : 5552,
                                "needTime" : 0,
                                "needYield" : 0,
                                "saveState" : 44,
                                "restoreState" : 44,
                                "isEOF" : 1,
                                "invalidates" : 0,
                                "keyPattern" : {
                                        "age" : 1,
                                        "account" : 1
                                },
                                "indexName" : "age_1_account_1",
                                "isMultiKey" : false,
                                "multiKeyPaths" : {
                                        "age" : [ ],
                                        "account" : [ ]
                                },
                                "isUnique" : false,
                                "isSparse" : false,
                                "isPartial" : false,
                                "indexVersion" : 2,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "age" : [
                                                "[50.0, 50.0]"
                                        ],
                                        "account" : [
                                                "[MinKey, MaxKey]"
                                        ]
                                },
                                "keysExamined" : 5552,
                                "seeks" : 1,
                                "dupsTested" : 0,
                                "dupsDropped" : 0,
                                "seenInvalidated" : 0
                        }
                }
        },
        "serverInfo" : {
                "host" : "LAPTOP-NKB522HC",
                "port" : 27017,
                "version" : "4.0.1",
                "gitVersion" : "54f1582fc6eb01de4d4c42f26fc133e623f065fb"
        },
        "ok" : 1
}
testdb 26 >db.testdb.dropIndex("age_1_account_1")
{ "nIndexesWas" : 2, "ok" : 1 }
testdb 27 >db.testdb.find({"account":"account100"}).explain("executionStats")
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "testdb.testdb",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "account" : {
                                "$eq" : "account100"
                        }
                },
                "winningPlan" : {
                        "stage" : "COLLSCAN",
                        "filter" : {
                                "account" : {
                                        "$eq" : "account100"
                                }
                        },
                        "direction" : "forward"
                },
                "rejectedPlans" : [ ]
        },
        "executionStats" : {
                "executionSuccess" : true,
                "nReturned" : 1,
                "executionTimeMillis" : 336,
                "totalKeysExamined" : 0,
                "totalDocsExamined" : 500000,
                "executionStages" : {
                        "stage" : "COLLSCAN",
                        "filter" : {
                                "account" : {
                                        "$eq" : "account100"
                                }
                        },
                        "nReturned" : 1,
                        "executionTimeMillisEstimate" : 292,
                        "works" : 500002,
                        "advanced" : 1,
                        "needTime" : 500000,
                        "needYield" : 0,
                        "saveState" : 3918,
                        "restoreState" : 3918,
                        "isEOF" : 1,
                        "invalidates" : 0,
                        "direction" : "forward",
                        "docsExamined" : 500000
                }
        },
        "serverInfo" : {
                "host" : "LAPTOP-NKB522HC",
                "port" : 27017,
                "version" : "4.0.1",
                "gitVersion" : "54f1582fc6eb01de4d4c42f26fc133e623f065fb"
        },
        "ok" : 1
}
testdb 28 >db.testdb.ensureIndex({"account":1},{"unique":true})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
testdb 29 >db.testdb.find({"account":"account100"})
{ "_id" : ObjectId("5ba76b234ea0adec2ddcbffc"), "account" : "account100", "age" : 75 }
testdb 30 >db.testdb.dropIndex("account_1")
{ "nIndexesWas" : 2, "ok" : 1 }
testdb 31 >db.testdb.ensureIndex({"account":1},{"unique":true,"dropdups":true})
{
        "ok" : 0,
        "errmsg" : "The field 'dropdups' is not valid for an index specification. Specification: { key: { account: 1.0 }, name: \"account_1\", unique: true, dropdups: true }",
        "code" : 197,
        "codeName" : "InvalidIndexSpecificationOption"
}
testdb 32 >db.testdb.dropIndex("account_1
2018-09-23T17:17:16.062+0530 E QUERY    [js] SyntaxError: unterminated string literal @(shell):1:20
testdb 33 >db.testdb.dropIndex("account_1")
{
        "ok" : 0,
        "errmsg" : "index not found with name [account_1]",
        "code" : 27,
        "codeName" : "IndexNotFound"
}
testdb 34 >db.testdb.ensureIndex({"account":1},
... {"unique":true,"spare":true})
{
        "ok" : 0,
        "errmsg" : "The field 'spare' is not valid for an index specification. Specification: { key: { account: 1.0 }, name: \"account_1\", unique: true, spare: true }",
        "code" : 197,
        "codeName" : "InvalidIndexSpecificationOption"
